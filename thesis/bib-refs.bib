@inproceedings{minh2008stamp,
  title={STAMP: Stanford transactional applications for multi-processing},
  author={Minh, Chi Cao and Chung, JaeWoong and Kozyrakis, Christos and Olukotun, Kunle},
  booktitle={2008 IEEE International Symposium on Workload Characterization},
  pages={35--46},
  year={2008},
  organization={IEEE}
}

@article{lee1961algorithm,
  title={An algorithm for path connections and its applications},
  author={Lee, Chin Yang},
  journal={IRE transactions on electronic computers},
  number={3},
  pages={346--365},
  year={1961},
  publisher={IEEE}
}
@inproceedings{watson2007study,
  title={A study of a transactional parallel routing algorithm},
  author={Watson, Ian and Kirkham, Chris and Luj{\'a}n, Mikel},
  booktitle={16th International Conference on Parallel Architecture and Compilation Techniques (PACT 2007)},
  pages={388--400},
  year={2007},
  organization={IEEE}
}
@article{pop2002genome,
  title={Genome sequence assembly: Algorithms and issues},
  author={Pop, Mihai and Salzberg, Steven L and Shumway, Martin},
  journal={Computer},
  volume={35},
  number={7},
  pages={47--54},
  year={2002},
  publisher={IEEE}
}
@inproceedings{haagdorens2004improving,
  title={Improving the performance of signature-based network intrusion detection sensors by multi-threading},
  author={Haagdorens, Bart and Vermeiren, Tim and Goossens, Marnix},
  booktitle={International Workshop on Information Security Applications},
  pages={188--203},
  year={2004},
  organization={Springer}
}

% the foundation for stm

@article{shavit1997software,
  title={Software transactional memory},
  author={Shavit, Nir and Touitou, Dan},
  journal={Distributed Computing},
  volume={10},
  number={2},
  pages={99--116},
  year={1997},
  publisher={Springer}
}

@article{cascaval2008software,
  title={Software transactional memory: Why is it only a research toy?},
  author={Cascaval, Calin and Blundell, Colin and Michael, Maged and Cain, Harold W and Wu, Peng and Chiras, Stefanie and Chatterjee, Siddhartha},
  journal={Queue},
  volume={6},
  number={5},
  pages={46--58},
  year={2008},
  publisher={ACM New York, NY, USA}
}


@inproceedings{swalens2016transactional,
  title={Transactional Tasks: Parallelism in Software Transactions},
  author={Swalens, Janwillem and De Koster, Joeri and De Meuter, Wolfgang},
  booktitle={30th European Conference on Object-Oriented Programming (ECOOP 2016)},
  year={2016},
  organization={Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik}
}

% irregular stuff

@article{kulkarni2009much,
  title={How much parallelism is there in irregular applications?},
  author={Kulkarni, Milind and Burtscher, Martin and Inkulu, Rajeshkar and Pingali, Keshav and Cas{\c{c}}aval, Calin},
  journal={ACM sigplan notices},
  volume={44},
  number={4},
  pages={3--14},
  year={2009},
  publisher={ACM New York, NY, USA}
}

@inproceedings{kulkarni2007optimistic,
  title={Optimistic parallelism requires abstractions},
  author={Kulkarni, Milind and Pingali, Keshav and Walter, Bruce and Ramanarayanan, Ganesh and Bala, Kavita and Chew, L Paul},
  booktitle={Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={211--222},
  year={2007}
}

@article{pingali2009amorphous,
  title={Amorphous data-parallelism in irregular algorithms},
  author={Pingali, Keshav and Kulkarni, Milind and Nguyen, Donald and Burtscher, Martin and Mendez-Lojo, Mario and Prountzos, Dimitrios and Sui, Xin and Zhong, Zifei},
  journal={The University of Texas at Austin, Department of Computer Sciences, Austin, TX, USA},
  year={2009}
}

% ohua

@book{ertel2019dis,
  author = {Ertel, Sebastian},
  title = {Towards Implicit Parallel Programming for Systems},
  publisher = {},
  keywords = {Hochschulschrift},
  year = {2019},
  abstract = {Tag der Verteidigung: 04.09.2019},
  address = {Dresden},
  organization={Technische Universität Dresden},
  url = {http://slubdd.de/katalog?TN_libero_mab216723183}
}

@mastersthesis{adam2019master,
  title={Ohua-powered, Semi-transparent UDF’s in the Noria Database},
  author={Justus Adam},
  year={2019},
  month=nov,
  school={TU Dresden},
}

@inproceedings{ertel2015ohua,
  author={Sebastian Ertel and Christof Fetzer and Pascal Felber},
  title={Ohua: Implicit Dataflow Programming for Concurrent Systems},
  booktitle={Proceedings of the Principles and Practices of Programming on The Java Platform},
  series={PPPJ '15},
  year={2015},
  isbn={978-1-4503-3712-0},
  location={Melbourne, FL, USA},
  pages={51--64},
  numpages={14},
  url={http://doi.acm.org/10.1145/2807426.2807431},
  doi={10.1145/2807426.2807431},
  acmid={2807431},
  publisher={ACM},
  address={New York, NY, USA},
}

@InProceedings{ertel2019stclang,
  author = {Ertel, Sebastian and Adam, Justus and Rink, Norman A. and Goens, Andr{\'e}s and Castrillon, Jeronimo},
  title = {{STCLang}: State Thread Composition as a Foundation for Monadic Dataflow Parallelism},
  booktitle = {Proceedings of the 12th ACM SIGPLAN International Symposium on Haskell},
  year = {2019},
  series = {Haskell 2019},
  pages = {146--161},
  address = {New York, NY, USA},
  month = aug,
  publisher = {ACM},
  abstract = {Dataflow execution models are used to build highly scalable parallel systems. A programming model that targets parallel dataflow execution must answer the following question: How can parallelism between two dependent nodes in a dataflow graph be exploited? This is difficult when the dataflow language or programming model is implemented by a monad, as is common in the functional community, since expressing dependence between nodes by a monadic bind suggests sequential execution.
Even in monadic constructs that explicitly separate state from computation, problems arise due to the need to reason about opaquely defined state. Specifically, when abstractions of the chosen programming model do not enable adequate reasoning about state, it is difficult to detect parallelism between composed stateful computations.
In this paper, we propose a programming model that enables the composition of stateful computations and still exposes opportunities for parallelization. We also introduce smap, a higher-order function that can exploit parallelism in stateful computations. We present an implementation of our programming model and smap in Haskell and show that basic concepts from functional reactive programming can be built on top of our programming model with little effort. We compare these implementations to a state-of-the-art approach using monad-par and LVars to expose parallelism explicitly and reach the same level of performance, showing that our programming model successfully extracts parallelism that is present in an algorithm. Further evaluation shows that smap is expressive enough to implement parallel reductions and our programming model resolves short-comings of the stream-based programming model for current state-of-the-art big data processing systems.},
  acmid = {3342600},
  doi = {10.1145/3331545.3342600},
  isbn = {978-1-4503-6813-1},
  keywords = {conf},
  location = {Berlin, Germany},
  numpages = {16},
  url = {http://doi.acm.org/10.1145/3331545.3342600}
}

% about stragglers and their mitigation
@inproceedings{ousterhout2013case,
  title={The case for tiny tasks in compute clusters},
  author={Ousterhout, Kay and Panda, Aurojit and Rosen, Joshua and Venkataraman, Shivaram and Xin, Reynold and Ratnasamy, Sylvia and Shenker, Scott and Stoica, Ion},
  booktitle={Presented as part of the 14th Workshop on Hot Topics in Operating Systems},
  year={2013}
}

@inproceedings{burton1981executing,
  title={Executing functional programs on a virtual tree of processors},
  author={Burton, F Warren and Sleep, M Ronan},
  booktitle={Proceedings of the 1981 conference on Functional programming languages and computer architecture},
  pages={187--194},
  year={1981}
}

@inproceedings{halstead1984implementation,
  title={Implementation of Multilisp: Lisp on a multiprocessor},
  author={Halstead Jr, Robert H},
  booktitle={Proceedings of the 1984 ACM Symposium on LISP and functional programming},
  pages={9--17},
  year={1984}
}

% tokio
@online{WEB:tokiors2020,
    author  = {The tokio contributors},
    title   = {Tokio - The asynchronous run-time for the Rust programming language.},
    month   = {04},
    year    = {2020},
    url     = {https://tokio.rs},
    urldate = {2020-04-24}
}



% my contributions
@ONLINE {wittwer2020stmdata,
    author = {Felix Wittwer},
    title  = {stm-datastructures: Datastructures specifically tailored for use with STM.},
    month  = {03},
    year   = {2020},
    url    = {https://github.com/feliix42/stm-datastructures}
}
